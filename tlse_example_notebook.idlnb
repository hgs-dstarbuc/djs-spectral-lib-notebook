{
  "version": "2.0.0",
  "cells": [
    {
      "type": "markdown",
      "content": [
        "### Generating ENVI Spectra Libraries with TLSE Data",
        "",
        "This notebook shows an example of how togenerate ENVI Spectral Libraries using the sprectra data from the TLSE data set. Running the first cell in this notebook will bring up a dialog for you to pick the directory in which the spectral reflectance data is saved.  "
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "inputDirectory = dialog_pickfile(/directory)"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "The next cell will read in the reflectance and wavelengths from each file and then store the data in a large hash. The first line in the file is skipped because it contains header information."
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "spectraFiles = file_search(inputDirectory, '*.txt')",
        "allSpectraHash = hash()",
        "for fileIndex = 0, n_elements(spectraFiles) - 1, 1 do begin",
        "    print, 'Reading file ' + strtrim(fileIndex,2) + ' of ' + strtrim(n_elements(spectraFiles) - 1,2)",
        "    openr, lun, spectraFiles[fileIndex], /get_lun",
        "    currentFileBaseName = file_basename(spectraFiles[fileIndex], '.txt')",
        "    tempWaveLengthList = list()",
        "    tempReflectanceList = list()",
        "    line = ''",
        "    currentHash = hash()",
        "    lineNumber = 0",
        "    while not eof(lun) do begin",
        "        readf, lun, line",
        "        lineSplit = strsplit(line, /extract)",
        "        currentWaveLength = lineSplit[0]",
        "        currentReflectance = lineSplit[1]",
        "        if lineNumber gt 0 then begin",
        "            tempWaveLengthList->add, currentWaveLength",
        "            tempReflectanceList->add, currentReflectance",
        "        endif",
        "        lineNumber++",
        "    endwhile    ",
        "    currentHash['wv'] = tempWaveLengthList->toArray()",
        "    currentHash['ref'] = tempReflectanceList->toArray()",
        "    allSpectraHash[currentFileBaseName] = currentHash",
        "    obj_destroy, tempWaveLengthList",
        "    obj_destroy, tempReflectanceList",
        "    free_lun, lun",
        "endfor",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Running the next cell will bring up a dialog to select the file that contains the \"bad band\" information for the spectra files. It should be called something like \"atm_bands_mask.txt\". "
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "badBandFile = dialog_pickfile()"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "The next cell will read in all fo the bad band data from the file selected in the previous cell and then store it into an array. "
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "openr, lun, badBandFile, /get_lun",
        "line=''",
        "badBandsList = list()",
        "while not eof(lun) do begin",
        "    readf, lun, line",
        "    lineSplit = strsplit(line, /extract)",
        "    badBandsList->add, lineSplit[1]",
        "endwhile",
        "badBandsArray = badBandsList.toArray()",
        "free_lun, lun"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "The final cell will generate a spectral library file and then fill it in with the spectras that are stored in the hash. When generating the spectral library object, it is important to specify the the wavelengths (wl), bad bands (bbl) and wavelength units (wavelegth_units). "
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "e = ENVI()",
        "   ",
        "; Create a new spectral library",
        "specLibName = e.GetTemporaryFilename('sli')",
        "specLib = EnviSpectralLibrary(specLibName)",
        "spectraNames = allSpectraHash->keys()",
        "currentHash = allSpectraHash[spectraNames[0]] ",
        "specLib->SetProperty, wl=currentHash['wv'], $",
        "  bbl=badBandsArray, $",
        "  WAVELENGTH_UNITS = 'nm'",
        "",
        "for nameIndex = 0, n_elements(spectraNames)-1 do begin",
        "  currentHash = allSpectraHash[spectraNames[nameIndex]]",
        "  specLib->addSpectra, spectraNames[nameIndex], double(currentHash['ref']) ",
        "endfor",
        "  "
      ],
      "metadata": {},
      "outputs": []
    }
  ]
}